
match (data: x = 5; y = 10):
    5, 10 => "Yep!"


type ast = variant:
    fn_decl
    fn_appl
    statement
    expression
    for_loop
    if_statement


def factorial(int n):
    return if n > 1
        then: n * factorial(n - 1)
        else 1

    return switch:
        n > 1:  n * factorial: n - 1
        else:   1

def flat_map(type k, type v):
    return struct:
        type entry = tuple(k, v)
        entry.vector entries

        def element(k) -> v:
            return entries.find(k)


def tokenize(string input) -> token.list:
    ie: tokenize an input string, returning
        tokens as defined by variant return.

    string x = verbatim:
        This is text will be reproduced verbatim!
        
    assert: input.size > 0 and input.valid_unicode()

    return token.list.empty

def foo():
    return type(data:
        x = 5
        y = 5
    )

foo().x
